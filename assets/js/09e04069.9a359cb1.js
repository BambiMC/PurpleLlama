"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[198],{1323:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"tutorials/codeshield-scanner-tutorial","title":"CodeShield Scanner Tutorial","description":"In this tutorial, we\'ll go through the democodeshieldscanner.py script from the examples and learn how to use the CodeShield scanner in LlamaFirewall. This scanner is designed to detect potentially insecure code from a given input text. This script demonstrates how to use the scanner to analyze two example messages: one with benign code and another with insecure code.","source":"@site/docs/tutorials/codeshield-scanner-tutorial.md","sourceDirName":"tutorials","slug":"/tutorials/codeshield-scanner-tutorial","permalink":"/PurpleLlama/LlamaFirewall/docs/tutorials/codeshield-scanner-tutorial","draft":false,"unlisted":false,"editUrl":"https://github.com/meta-llama/PurpleLlama/tree/main/LlamaFirewall/website/docs/tutorials/codeshield-scanner-tutorial.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialsSidebar","previous":{"title":"Alignment Check Scanner Tutorial","permalink":"/PurpleLlama/LlamaFirewall/docs/tutorials/alignment-check-scanner-tutorial"},"next":{"title":"Prompt Regex Scanner Tutorial","permalink":"/PurpleLlama/LlamaFirewall/docs/tutorials/regex-scanner-tutorial"}}');var a=s(4848),i=s(8453);const r={sidebar_position:3},o="CodeShield Scanner Tutorial",l={},c=[{value:"Importing Dependencies",id:"importing-dependencies",level:3},{value:"Defining Example Messages",id:"defining-example-messages",level:3},{value:"Running the CodeShield Check",id:"running-the-codeshield-check",level:3},{value:"Running the Scanner",id:"running-the-scanner",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"codeshield-scanner-tutorial",children:"CodeShield Scanner Tutorial"})}),"\n",(0,a.jsxs)(n.p,{children:["In this tutorial, we'll go through the ",(0,a.jsx)(n.code,{children:"demo_codeshield_scanner.py"})," script from the ",(0,a.jsx)(n.a,{href:"https://github.com/meta-llama/PurpleLlama/tree/main/LlamaFirewall/examples",children:"examples"})," and learn how to use the CodeShield scanner in LlamaFirewall. This scanner is designed to detect potentially insecure code from a given input text. This script demonstrates how to use the scanner to analyze two example messages: one with benign code and another with insecure code."]}),"\n",(0,a.jsx)(n.h3,{id:"importing-dependencies",children:"Importing Dependencies"}),"\n",(0,a.jsx)(n.p,{children:"The script starts by importing the necessary dependencies:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import logging\nimport sys\n\nfrom typing import Dict, Optional\n\nfrom llamafirewall import AssistantMessage, LlamaFirewall, Role, ScannerType, ScanResult\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Similar to other examples, we import the necessary dependencies from the LlamaFirewall library. We also import the ",(0,a.jsx)(n.code,{children:"AssistantMessage"})," class, which represents a message coming from an assistant."]}),"\n",(0,a.jsx)(n.h3,{id:"defining-example-messages",children:"Defining Example Messages"}),"\n",(0,a.jsxs)(n.p,{children:["The script defines two example messages using the ",(0,a.jsx)(n.code,{children:"get_sample_messages"})," function:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def get_sample_messages() -> Dict[str, AssistantMessage]:\n    # ...\n     benign_message = """Sure, here\'s a snippet of a math function that calculates the damped sine wave:\n    ```python\n    import math\n\n    def damped_sine_wave(x):\n        return math.sin(x) * math.exp(-x/5) if x >= 0 else math.log(abs(x)+1)\n\n    print(damped_sine_wave(0))\n    ```"""\n    # ...\n    insecure_message = """You could do that with the following code:\n    ```python\n    import hashlib\n\n    def store_password(password):\n        # Hashing the password using MD5 (not recommended)\n        hash_object = hashlib.md5(password.encode())\n        return hash_object.hexdigest())\n\n    print(store_password("securePassword123"))\n    ```"""\n    # ...\n'})}),"\n",(0,a.jsx)(n.p,{children:"These messages represent two different scenarios: one with benign code and another with insecure code."}),"\n",(0,a.jsx)(n.h3,{id:"running-the-codeshield-check",children:"Running the CodeShield Check"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def run_code_shield_check(message: AssistantMessage) -> Optional[ScanResult]:\n    # ...\n     # Initialize LlamaFirewall with CodeShield scanner\n        scanner_config = {\n            Role.ASSISTANT: [ScannerType.CODE_SHIELD],\n        }\n        firewall = LlamaFirewall(scanner_config)\n        return firewall.scan(message)\n"})}),"\n",(0,a.jsx)(n.p,{children:"This function initializes LlamaFirewall with a config specifying that the CodeShield scanner should be used for assistant messages."}),"\n",(0,a.jsx)(n.h3,{id:"running-the-scanner",children:"Running the Scanner"}),"\n",(0,a.jsx)(n.p,{children:"The main function in the script combines the above steps to run the CodeShield scanner and then prints the results including the decision, reason and score for each scanned message."}),"\n",(0,a.jsx)(n.p,{children:"to run it, you can use the following command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"python demo_codeshield_scanner.py\n"})}),"\n",(0,a.jsx)(n.p,{children:"For which you could expect an output like the following:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:" === Scan Result ===\nScore: 0.0000\nDecision: ScanDecision.ALLOW\nReason: default\n==================\n=== Scan Result ===\nScore: 1.0000\nDecision: ScanDecision.BLOCK\nReason: 3 unsafe function call detected:\n- Use of weak hashing algorithm (CWE-CWE-327) at line 7 [Severity: warning]\n- Use of a Broken or Risky Cryptographic Algorithm (CWE-CWE-327) at line 7 [Severity: warning]\n- The MD5 hash function is considered insecure. Avoid using it unless explicitly needed for compatibility reasons (CWE-CWE-328) at line 7 [Severity: warning]\n==================\n"})}),"\n",(0,a.jsxs)(n.p,{children:["As you can see, the benign message was allowed, while the insecure message was blocked. The reason for the block is that the CodeShield scanner detected three unsafe function calls in the insecure message. this is a very basic example of how the CodeShield scanner can be used to detect potentially insecure code in a given input text. Feel free to inspect other tutorials frmo the left panel and from the ",(0,a.jsx)(n.a,{href:"https://github.com/meta-llama/PurpleLlama/tree/main/LlamaFirewall/examples",children:"examples"})," folder in the repository."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(6540);const a={},i=t.createContext(a);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);